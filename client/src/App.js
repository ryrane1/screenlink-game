import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import confetti from "canvas-confetti";
import "./App.css";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || "http://localhost:5001";

function App() {
  const [mode, setMode] = useState("daily");
  const [startActor, setStartActor] = useState(null);
  const [goalActor, setGoalActor] = useState(null);
  const [chain, setChain] = useState([]);
  const [actorInput, setActorInput] = useState("");
  const [titleInput, setTitleInput] = useState("");
  const [suggestions, setSuggestions] = useState([]);
  const [suggestType, setSuggestType] = useState("actor");
  const [gameOver, setGameOver] = useState(false);
  const [copied, setCopied] = useState(false);
  const [playerName, setPlayerName] = useState("");
  const [submittedName, setSubmittedName] = useState(false);
  const [leaderboard, setLeaderboard] = useState([]);
  const [currentStreak, setCurrentStreak] = useState(() => Number(localStorage.getItem("streak")) || 0);
  const [bestLinkCount, setBestLinkCount] = useState(() => Number(localStorage.getItem("bestScore")) || 
null);
  const [loading, setLoading] = useState(true);
  const quotes = [
    "‚ÄúFrankly, my dear, I don't give a damn.‚Äù ‚Äî Gone with the Wind",
    "‚ÄúI'm gonna make him an offer he can't refuse.‚Äù ‚Äî The Godfather",
    "‚ÄúYou talkin' to me?‚Äù ‚Äî Taxi Driver",
    "‚ÄúMay the Force be with you.‚Äù ‚Äî Star Wars",
    "‚ÄúHere's looking at you, kid.‚Äù ‚Äî Casablanca",
    "‚ÄúI see dead people.‚Äù ‚Äî The Sixth Sense",
    "‚ÄúHasta la vista, baby.‚Äù ‚Äî Terminator 2",
    "‚ÄúYou can't handle the truth!‚Äù ‚Äî A Few Good Men",
    "‚ÄúWhy so serious?‚Äù ‚Äî The Dark Knight",
    "‚ÄúI'll be back.‚Äù ‚Äî The Terminator",
    "‚ÄúTo infinity... and beyond!‚Äù ‚Äî Toy Story",
    "‚ÄúI'm king of the world!‚Äù ‚Äî Titanic",
    "‚ÄúJust keep swimming.‚Äù ‚Äî Finding Nemo",
    "‚ÄúLife is like a box of chocolates.‚Äù ‚Äî Forrest Gump",
    "‚ÄúNobody puts Baby in a corner.‚Äù ‚Äî Dirty Dancing",
    "‚ÄúHouston, we have a problem.‚Äù ‚Äî Apollo 13",
    "‚ÄúKeep the change, ya filthy animal.‚Äù ‚Äî Home Alone",
    "‚ÄúThat'll do, pig. That'll do.‚Äù ‚Äî Babe",
    "‚ÄúYou is kind. You is smart. You is important.‚Äù ‚Äî The Help",
    "‚ÄúI am serious. And don't call me Shirley.‚Äù ‚Äî Airplane!",
    "‚ÄúIt's alive! It's alive!‚Äù ‚Äî Frankenstein",
    "‚ÄúSay hello to my little friend!‚Äù ‚Äî Scarface",
    "‚ÄúYou had me at 'hello.'‚Äù ‚Äî Jerry Maguire",
    "‚ÄúThey're here...‚Äù ‚Äî Poltergeist",
    "‚ÄúI'm walking here!‚Äù ‚Äî Midnight Cowboy",
    "‚ÄúToto, I've a feeling we're not in Kansas anymore.‚Äù ‚Äî The Wizard of Oz",
    "‚ÄúYou make me want to be a better man.‚Äù ‚Äî As Good as It Gets",
    "‚ÄúThe stuff that dreams are made of.‚Äù ‚Äî The Maltese Falcon",
    "‚ÄúCarpe diem. Seize the day, boys.‚Äù ‚Äî Dead Poets Society",
    "‚ÄúIt's not who I am underneath, but what I do that defines me.‚Äù ‚Äî Batman Begins"
  ];

  const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
  const chainContainerRef = useRef(null);

  useEffect(() => {
    fetchNewGame(false);
  }, [mode]);

  useEffect(() => {
    if (chain.length > 0 && chain[chain.length - 1].name === goalActor?.name) {
      setGameOver(true);
      confetti();

      const links = (chain.length - 1) / 2;
      if (!bestLinkCount || links < bestLinkCount) {
        setBestLinkCount(links);
        localStorage.setItem("bestScore", links);
      }

      if (mode === "daily") {
        if (playerName && !submittedName) submitScore();
        fetchLeaderboard();
      }
    }
  }, [chain, goalActor]);

  const fetchNewGame = async (preserveStreak = false) => {
    setLoading(true);

    const url = mode === "daily" ? "/get-daily-actors" : "/get-random-actors";
    const res = await axios.get(`${BACKEND_URL}${url}`);
    setStartActor(res.data.start);
    setGoalActor(res.data.goal);
    setChain([res.data.start]);
    setGameOver(false);
    setActorInput("");
    setTitleInput("");
    setSuggestions([]);
    setSubmittedName(false);

    if (!preserveStreak) {
      setCurrentStreak(0);
      localStorage.setItem("streak", "0");
    }

    setLoading(false);

    if (mode === "daily") fetchLeaderboard();
  };

  const fetchLeaderboard = async () => {
    try {
      const res = await axios.get(`${BACKEND_URL}/get-daily-leaderboard`);
      setLeaderboard(res.data || []);
    } catch (error) {
      console.error("Error fetching leaderboard:", error);
      setLeaderboard([]);
    }
  };

  const handleInputChange = (e, type) => {
    const value = e.target.value;
    if (type === "actor") {
      setActorInput(value);
      setSuggestType("actor");
    } else {
      setTitleInput(value);
      setSuggestType("title");
    }

    if (value.length > 1) {
      axios
        .get(`${BACKEND_URL}/suggest?query=${value}&type=${type}`)
        .then((res) => setSuggestions(res.data));
    } else {
      setSuggestions([]);
    }
  };

  const handleSuggestionClick = (suggestion) => {
    if (suggestType === "actor") {
      setActorInput(suggestion.name);
    } else {
      setTitleInput(suggestion.name);
    }
    setSuggestions([]);
  };

  const handleSubmit = async () => {
    if (!actorInput || !titleInput) return;

    const payload = {
      actor: chain[chain.length - 1].name,
      title: titleInput,
      next_actor: actorInput,
    };

    try {
      const res = await axios.post(`${BACKEND_URL}/validate-link`, payload);
      if (res.data.valid) {
        const movieItem = {
          name: titleInput,
          type: "title",
          image: res.data.poster,
        };
        const actorItem = {
          name: actorInput,
          type: "actor",
          image: res.data.actor_image,
        };
        setChain([...chain, movieItem, actorItem]);
        setActorInput("");
        setTitleInput("");
        setSuggestions([]);
      } else {
        alert("Invalid connection.");
      }
    } catch (err) {
      console.error(err);
    }
  };

  const handleUndo = () => {
    if (chain.length > 1) {
      setChain(chain.slice(0, -2));
    }
  };

  const handleShare = () => {
    const links = (chain.length - 1) / 2;
    const linkUrl = "https://screenlink-game-rohan-ranes-projects.vercel.app/";
    let message = "";

    if (mode === "daily") {
      message = `üß© I completed today's Daily Link in ${links}Ô∏è‚É£ links!\nHow many can you do?\n\n${linkUrl}`;
    } else {
      message = `üé¨ I just connected ${chain[0]?.name} to ${chain[chain.length - 1]?.name} in ${links}Ô∏è‚É£ 
links!\n\n`;
      for (let i = 0; i < chain.length; i++) {
        const icon = chain[i].type === "title" ? "üçø" : "üé≠";
        message += `${icon} ${chain[i].name}\n`;
      }
      message += `\nTry playing now!\n${linkUrl}`;
    }

    navigator.clipboard.writeText(message)
      .then(() => {
        setCopied(true);
        setTimeout(() => setCopied(false), 3000);
      })
      .catch(() => alert("Failed to copy message."));
  };

  const handlePlayAgain = () => {
    const newStreak = currentStreak + 1;
    setCurrentStreak(newStreak);
    localStorage.setItem("streak", newStreak.toString());
    fetchNewGame(true);
  };

  const submitScore = async () => {
    const steps = (chain.length - 1) / 2;
    await axios.post(`${BACKEND_URL}/submit-daily-score`, {
      player: playerName,
      steps: steps,
    });
    setSubmittedName(true);
  };

  if (loading) {
    return (
      <div className="App">
        <h1>ScreenLink</h1>
        <p className="loading-message">Loading actors...</p>
      </div>
    );
  }
  return (
    <div className="App">
      <h1>ScreenLink</h1>
      <p className="description">
        Connect the <b>Start</b> actor to the <b>Goal</b> actor by entering movie titles and actors they‚Äôve worked with ‚Äî one link at a time.
      </p>

      <div className="mode-toggle">
        <button className={mode === "daily" ? "active" : ""} onClick={() => setMode("daily")}>Daily</button>
        <button className={mode === "free" ? "active" : ""} onClick={() => setMode("free")}>Free Play</button>
      </div>
          
      <div className="streak-bar">
        <b> Streak: {currentStreak} | Best Score: {bestLinkCount ?? "‚Äî"} </b>
      </div>

      <div className="actor-pair">
        {startActor && (
          <div className="actor-card">
            <img src={startActor.image} alt={startActor.name} />
            <p><strong>Start:</strong> {startActor.name}</p>
          </div>
        )}
        {goalActor && (
          <div className="actor-card goal">
            <img src={goalActor.image} alt={goalActor.name} />
            <p className="goal-name"><strong>Goal:</strong> {goalActor.name}</p>
          </div>
        )}
      </div>

      {mode === "free" && (
        <div className="button-row-below">
          {gameOver ? (
            <button className="refresh-btn" onClick={handlePlayAgain}>Play Again</button>
          ) : (
            <button className="refresh-btn" onClick={() => fetchNewGame(false)}>Refresh</button>
          )}
        </div>
      )}  
        <div className="inputs-row">
          <div className="input-wrapper">
            <input
              type="text"
              placeholder="Enter Movie Title"
              value={titleInput}
              onChange={(e) => handleInputChange(e, "title")}
            />
            {suggestType === "title" && suggestions.length > 0 && (
              <div className="suggestions-dropdown">
                {suggestions.map((s, idx) => (
                  <div key={idx} className="suggestion" onClick={() => handleSuggestionClick(s)}>
                    {s.image && <img src={s.image} alt={s.name} />}
                    <span>{s.name}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
          <div className="input-wrapper">
            <input
              type="text"
              placeholder="Enter Actor Name"
              value={actorInput}
              onChange={(e) => handleInputChange(e, "actor")}
            />
            {suggestType === "actor" && suggestions.length > 0 && (
              <div className="suggestions-dropdown">
                {suggestions.map((s, idx) => (
                  <div key={idx} className="suggestion" onClick={() => handleSuggestionClick(s)}>
                    {s.image && <img src={s.image} alt={s.name} />}
                    <span>{s.name}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
          <button className="submit-btn" onClick={handleSubmit}>Submit</button>
          <button className="undo-btn" onClick={handleUndo}>Undo</button>
        </div>

      <div className="chain-container" ref={chainContainerRef}>
        {chain.map((item, index) => (
          <React.Fragment key={index}>
            <div className={`chain-item 
              ${item.type === "actor" ? "actor" : ""}
              ${item.type === "title" ? "title" : ""}
              ${item.name === goalActor?.name ? "goal" : ""}
            `}>
              {item.image && <img src={item.image} alt={item.name} />}
              <p>{item.name.replace(/ /g, "\u00A0")}</p>
            </div>
            {index < chain.length - 1 && (
              <div className={'arrow ${index === chain.length - 2 ? "animate" : ""}'}>‚ü∂</div>
            )}
          </React.Fragment>
        ))}
      </div>

      {gameOver && (
        <div className="share-row">
          <button className="share-btn" onClick={handleShare}>Share</button>
        </div>
      )}
      {copied && <p className="copied-msg">Copied to clipboard!</p>}

      {gameOver && mode === "daily" && !submittedName && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>üéâ You did it!</h3>
            <p>Enter your name to be added to today's leaderboard:</p>
            <input value={playerName} onChange={(e) => setPlayerName(e.target.value)} />
            <button onClick={submitScore}>Submit</button>
          </div>
        </div>
      )}

      {mode === "daily" && leaderboard.length > 0 && (
        <div className="leaderboard">
          <h2>üèÜ Daily Leaderboard</h2>
          <table>
            <thead>
              <tr>
                <th>Name</th>
                <th>Links</th>
              </tr>
            </thead>
            <tbody>
              {leaderboard
                .filter(entry => entry !== null)
                .map((entry, idx) => (
                  <tr key={idx}>
                    <td>{["ü•á 1st", "ü•à 2nd", "ü•â 3rd", "4th", "5th"][idx]} ‚Äî {entry.player}</td>
                    <td>{entry.steps}</td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      )}
      <p className="footer-quote">{randomQuote}</p>
    </div>
  );
}

export default App;
